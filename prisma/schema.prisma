generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  name          String? 
  emailVerified DateTime? 
  image         String? 

  role          Role    @default(User)
  rooms         Room[]

  accounts Account[]
  sessions Session[]

  streams  Stream[]
  upvotes  Upvote[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Stream {
  id            String         @id @default(uuid())
  type          StreamType
  active        Boolean        @default(true)
  userId        String
  extractedId   String
  url           String
  bigImg        String         @default("")
  smallImg      String         @default("")
  title         String         @default("")
  currentStream CurrentStream?
  user          User           @relation(fields: [userId], references: [id])
  upvotes       Upvote[]

  roomId      String // foregin key to room
  room          Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model CurrentStream {
  userId   String  @id
  streamId String? @unique
  stream   Stream? @relation(fields: [streamId], references: [id])
}

model Upvote {
  id       String @id @default(uuid())
  userId   String
  streamId String
  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, streamId])
}

enum StreamType {
  Spotify
  Youtube
}

enum Role {
  Admin
  User
}

model Room{
  id        String   @id @default(cuid()) 
  name      String   // A user-friendly name for the room, e.g., "Friday Night Stream"
  adminId   String   // Foreign key to the User who is the admin
  admin     User     @relation(fields: [adminId], references: [id])
  
  streams   Stream[] // A room has many streams (the queue)
  
  // To track the currently playing video for everyone
  currentStreamId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
